{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { WelcomeScreen } from \"../screens/auth/WelcomeScreen\";\nimport { LoginScreen } from \"../screens/auth/Login\";\nimport { RegisterScreen } from \"../screens/auth/Register\";\nimport { OtpScreen } from \"../screens/auth/Otp\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport i18n from \"../language/i18n\";\nimport React, { useEffect } from \"react\";\nimport * as Localization from \"expo-localization\";\nimport * as Updates from \"expo-updates\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport function getLanguage() {\n  var code;\n  return _regeneratorRuntime.async(function getLanguage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"languageCode\"));\n        case 3:\n          code = _context.sent;\n          if (!(code == null)) {\n            _context.next = 8;\n            break;\n          }\n          return _context.abrupt(\"return\", \"en\");\n        case 8:\n          if (!(code === \"ar\")) {\n            _context.next = 15;\n            break;\n          }\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(Localization.isRTL));\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(Localization.isRTL));\n        case 13:\n          _context.next = 19;\n          break;\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(Localization.isRTL));\n        case 17:\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(Localization.isRTL));\n        case 19:\n          i18n.changeLanguage(code);\n          return _context.abrupt(\"return\", code);\n        case 21:\n          _context.next = 26;\n          break;\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 23]], Promise);\n}\nexport function setLanguage(value) {\n  var oldLang, result;\n  return _regeneratorRuntime.async(function setLanguage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"languageCode\"));\n        case 2:\n          oldLang = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"languageCode\", value));\n        case 6:\n          result = _context2.sent;\n          i18n.changeLanguage(value);\n          if (!(value === \"ar\")) {\n            _context2.next = 16;\n            break;\n          }\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(true));\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(true));\n        case 13:\n          Updates.reloadAsync();\n          _context2.next = 22;\n          break;\n        case 16:\n          if (!(oldLang === \"ar\")) {\n            _context2.next = 22;\n            break;\n          }\n          _context2.next = 19;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(false));\n        case 19:\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(false));\n        case 21:\n          Updates.reloadAsync();\n        case 22:\n          return _context2.abrupt(\"return\", result);\n        case 25:\n          _context2.prev = 25;\n          _context2.t0 = _context2[\"catch\"](3);\n          console.log(_context2.t0);\n        case 28:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 25]], Promise);\n}\nexport var AccountNavigator = function AccountNavigator() {\n  useEffect(function () {\n    getLanguage();\n  }, []);\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"WelcomeScreen\",\n      component: WelcomeScreen\n    }), _jsx(Stack.Screen, {\n      name: \"LoginScreen\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"RegisterScreen\",\n      component: RegisterScreen\n    }), _jsx(Stack.Screen, {\n      name: \"OtpScreen\",\n      component: OtpScreen\n    })]\n  });\n};","map":{"version":3,"names":["createStackNavigator","WelcomeScreen","LoginScreen","RegisterScreen","OtpScreen","AsyncStorage","i18n","React","useEffect","Localization","Updates","Stack","getLanguage","getItem","code","I18nManager","forceRTL","isRTL","allowRTL","changeLanguage","console","log","setLanguage","value","oldLang","setItem","result","reloadAsync","AccountNavigator","headerShown"],"sources":["/Users/p.marasca/Desktop/Tu-Store/src/navigation/AccountNavigator.js"],"sourcesContent":["import { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { WelcomeScreen } from \"../screens/auth/WelcomeScreen\";\r\nimport { LoginScreen } from \"../screens/auth/Login\";\r\nimport { RegisterScreen } from \"../screens/auth/Register\";\r\nimport { OtpScreen } from \"../screens/auth/Otp\";\r\nimport { I18nManager } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport i18n from \"../language/i18n\";\r\nimport React, { useEffect } from \"react\";\r\nimport * as Localization from \"expo-localization\";\r\nimport * as Updates from \"expo-updates\";\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport async function getLanguage() {\r\n  try {\r\n    const code = await AsyncStorage.getItem(\"languageCode\");\r\n    if (code == null) {\r\n      return \"en\";\r\n    } else {\r\n      if (code === \"ar\") {\r\n        await I18nManager.forceRTL(Localization.isRTL);\r\n        await I18nManager.allowRTL(Localization.isRTL);\r\n      } else {\r\n        await I18nManager.forceRTL(Localization.isRTL);\r\n        await I18nManager.allowRTL(Localization.isRTL);\r\n      }\r\n      i18n.changeLanguage(code);\r\n      return code;\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function setLanguage(value) {\r\n  const oldLang = await AsyncStorage.getItem(\"languageCode\");\r\n  try {\r\n    const result = await AsyncStorage.setItem(\"languageCode\", value);\r\n    i18n.changeLanguage(value);\r\n    if (value === \"ar\") {\r\n      await I18nManager.forceRTL(true);\r\n      await I18nManager.allowRTL(true);\r\n      Updates.reloadAsync();\r\n    } else if (oldLang === \"ar\") {\r\n      await I18nManager.forceRTL(false);\r\n      await I18nManager.allowRTL(false);\r\n      Updates.reloadAsync();\r\n    }\r\n    return result;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\nexport const AccountNavigator = () => {\r\n  useEffect(() => {\r\n    getLanguage();\r\n  }, []);\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"WelcomeScreen\"\r\n        component={WelcomeScreen}\r\n      ></Stack.Screen>\r\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen}></Stack.Screen>\r\n      <Stack.Screen\r\n        name=\"RegisterScreen\"\r\n        component={RegisterScreen}\r\n      ></Stack.Screen>\r\n      <Stack.Screen name=\"OtpScreen\" component={OtpScreen}></Stack.Screen>\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}