{"ast":null,"code":"'use strict';\n\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"useSectionList\", \"renderListView\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport SwipeRow from \"./SwipeRow\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar SwipeListView = function (_PureComponent) {\n  _inherits(SwipeListView, _PureComponent);\n\n  var _super = _createSuper(SwipeListView);\n\n  function SwipeListView(props) {\n    var _this;\n\n    _classCallCheck(this, SwipeListView);\n\n    _this = _super.call(this, props);\n\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n\n    if (Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n\n    _this._onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n\n    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n\n      _this._onScroll = _this.props.onScroll;\n    }\n\n    return _this;\n  }\n\n  _createClass(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key, data) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key, data);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof SectionList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        } else if (this._listView instanceof Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n\n      if (typeof this.props.listViewRef === 'function') {\n        this.props.listViewRef && this.props.listViewRef(ref);\n      } else if (typeof this.props.listViewRef === 'object') {\n        if (Object.keys(this.props.listViewRef).includes('current')) {\n          this.props.listViewRef.current = ref;\n        }\n      }\n    }\n  }, {\n    key: \"closeAllOpenRows\",\n    value: function closeAllOpenRows() {\n      var _this2 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this2._rows[rowKey];\n\n        if (row) {\n          var rowTranslateX = Math.round(row.currentTranslateX || 0);\n\n          if (row.closeRow && rowTranslateX !== 0) {\n            row.closeRow();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"manuallyOpenAllRows\",\n    value: function manuallyOpenAllRows(toValue) {\n      var _this3 = this;\n\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this3._rows[rowKey];\n\n        if (row && row.manuallySwipeRow) {\n          row.manuallySwipeRow(toValue);\n        }\n      });\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this4 = this;\n\n      if (!HiddenComponent) {\n        return React.cloneElement(VisibleComponent, _objectSpread(_objectSpread({}, VisibleComponent.props), {}, {\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          }\n        }));\n      } else {\n        return _jsxs(SwipeRow, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this4.props.onSwipeValueChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress(key);\n          },\n          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,\n          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,\n          leftActionValue: item.leftActionValue || this.props.leftActionValue || 0,\n          rightActionValue: item.rightActionValue || this.props.rightActionValue || 0,\n          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,\n          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,\n          onLeftAction: function onLeftAction() {\n            return item.onLeftAction || _this4.props.onLeftAction && _this4.props.onLeftAction(key, _this4._rows);\n          },\n          onRightAction: function onRightAction() {\n            return item.onRightAction || _this4.props.onRightAction && _this4.props.onRightAction(key, _this4._rows);\n          },\n          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {\n            return _this4.props.onLeftActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {\n            return _this4.props.onRightActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this4.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          onPreviewEnd: this.props.onPreviewEnd,\n          children: [HiddenComponent, VisibleComponent]\n        });\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = \"\" + secId + rowId;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n          index = rowData.index;\n      var key = item.key;\n\n      if (this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          useSectionList = _this$props.useSectionList,\n          renderListView = _this$props.renderListView,\n          props = _objectWithoutProperties(_this$props, _excluded);\n\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? Animated.SectionList : SectionList;\n\n        return _jsx(_ListComponent, _objectSpread(_objectSpread(_objectSpread({}, props), this.listViewProps), {}, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem\n        }));\n      }\n\n      var ListComponent = this.props.useAnimatedList ? Animated.FlatList : FlatList;\n      return _jsx(ListComponent, _objectSpread(_objectSpread(_objectSpread({}, props), this.listViewProps), {}, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem\n      }));\n    }\n  }]);\n\n  return SwipeListView;\n}(PureComponent);\n\nSwipeListView.propTypes = {\n  renderListView: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderHiddenItem: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  closeOnScroll: PropTypes.bool,\n  closeOnRowPress: PropTypes.bool,\n  closeOnRowBeginSwipe: PropTypes.bool,\n  closeOnRowOpen: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  onScrollEnabled: PropTypes.func,\n  onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  swipeRowStyle: PropTypes.object,\n  listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  previewRowKey: PropTypes.string,\n  previewFirstRow: PropTypes.bool,\n  previewRowIndex: PropTypes.number,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  useAnimatedList: PropTypes.bool,\n  keyExtractor: PropTypes.func,\n  onPreviewEnd: PropTypes.func\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nexport default SwipeListView;","map":{"version":3,"names":["React","PureComponent","PropTypes","SwipeRow","SwipeListView","props","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","Platform","OS","yScrollOffset","layoutHeight","onLayout","e","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","refreshing","safeCloseOpenRow","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","key","closeOnRowBeginSwipe","swipeGestureBegan","data","swipeGestureEnded","toValue","closeOnRowOpen","onRowOpen","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","FlatList","scrollToEnd","SectionList","Animated","ref","listViewRef","Object","keys","includes","current","forEach","rowKey","row","rowTranslateX","Math","round","currentTranslateX","manuallySwipeRow","VisibleComponent","HiddenComponent","item","shouldPreviewRow","cloneElement","onRowDidOpen","onRowClose","onRowDidClose","onRowPress","setScrollEnabled","rowSwipeGestureBegan","_","rowSwipeGestureEnded","onSwipeValueChange","leftActivationValue","rightActivationValue","leftActionValue","rightActionValue","initialLeftActionState","initialRightActionState","onLeftAction","onRightAction","onLeftActionStatusChange","onRightActionStatusChange","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","swipeRowStyle","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","onPreviewEnd","secId","rowId","rowMap","Component","renderRow","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderCell","renderHiddenItem","index","keyExtractor","previewRowKey","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","propTypes","func","number","bool","oneOfType","object","string","defaultProps"],"sources":["/Users/nicolamelito/Desktop/Tu-Store/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"sourcesContent":["'use strict';\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, FlatList, Platform, SectionList } from 'react-native';\n\nimport SwipeRow from './SwipeRow';\n\n/**\n * ListView that renders SwipeRows.\n */\nclass SwipeListView extends PureComponent {\n    constructor(props) {\n        super(props);\n        this._rows = {};\n        this.openCellKey = null;\n        this.listViewProps = {};\n        if (Platform.OS === 'ios') {\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\n            this.yScrollOffset = 0;\n            this.layoutHeight = 0;\n            this.listViewProps = {\n                onLayout: e => this.onLayout(e),\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\n            };\n        }\n        this._onScroll = this.onScroll.bind(this);\n        if (this.props.onScroll && typeof this.props.onScroll === 'object') {\n            // Animated.event\n            this.props.onScroll.__addListener(this._onScroll);\n            this._onScroll = this.props.onScroll;\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.refreshing) {\n            this.safeCloseOpenRow();\n        }\n    }\n\n    setScrollEnabled(enable) {\n        if (this.props.scrollEnabled === false) {\n            return;\n        }\n        // Due to multiple issues reported across different versions of RN\n        // We do this in the safest way possible...\n        if (this._listView && this._listView.setNativeProps) {\n            this._listView.setNativeProps({ scrollEnabled: enable });\n        } else if (this._listView && this._listView.getScrollResponder) {\n            const scrollResponder = this._listView.getScrollResponder();\n            scrollResponder.setNativeProps &&\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\n        }\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n\n    safeCloseOpenRow() {\n        const rowRef = this._rows[this.openCellKey];\n        if (rowRef && rowRef.closeRow) {\n            this._rows[this.openCellKey].closeRow();\n        }\n    }\n\n    rowSwipeGestureBegan(key) {\n        if (\n            this.props.closeOnRowBeginSwipe &&\n            this.openCellKey &&\n            this.openCellKey !== key\n        ) {\n            this.safeCloseOpenRow();\n        }\n\n        if (this.props.swipeGestureBegan) {\n            this.props.swipeGestureBegan(key);\n        }\n    }\n\n    rowSwipeGestureEnded(key, data) {\n        if (this.props.swipeGestureEnded) {\n            this.props.swipeGestureEnded(key, data);\n        }\n    }\n\n    onRowOpen(key, toValue) {\n        if (\n            this.openCellKey &&\n            this.openCellKey !== key &&\n            this.props.closeOnRowOpen &&\n            !this.props.closeOnRowBeginSwipe\n        ) {\n            this.safeCloseOpenRow();\n        }\n        this.openCellKey = key;\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n\n    onRowPress() {\n        if (this.openCellKey) {\n            if (this.props.closeOnRowPress) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n    }\n\n    onScroll(e) {\n        if (Platform.OS === 'ios') {\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\n        }\n        if (this.openCellKey) {\n            if (this.props.closeOnScroll) {\n                this.safeCloseOpenRow();\n                this.openCellKey = null;\n            }\n        }\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n\n    onLayout(e) {\n        this.layoutHeight = e.nativeEvent.layout.height;\n        this.props.onLayout && this.props.onLayout(e);\n    }\n\n    // When deleting rows on iOS, the list may end up being over-scrolled,\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\n    // when that happens, which will make sure the list is kept in bounds.\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\n    onContentSizeChange(w, h) {\n        const height = h - this.layoutHeight;\n        if (this.yScrollOffset >= height && height > 0) {\n            if (this._listView instanceof FlatList) {\n                this._listView && this._listView.scrollToEnd();\n            } else if (this._listView instanceof SectionList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            } else if (this._listView instanceof Animated.FlatList) {\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\n            }\n        }\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n\n    setRefs(ref) {\n        this._listView = ref;\n        if (typeof this.props.listViewRef === 'function') {\n            this.props.listViewRef && this.props.listViewRef(ref);\n        } else if (typeof this.props.listViewRef === 'object') {\n            if (Object.keys(this.props.listViewRef).includes('current')) {\n                this.props.listViewRef.current = ref;\n            }\n        }\n    }\n\n    closeAllOpenRows() {\n        Object.keys(this._rows).forEach(rowKey => {\n            const row = this._rows[rowKey];\n            if (row) {\n                const rowTranslateX = Math.round(row.currentTranslateX || 0);\n                if (row.closeRow && rowTranslateX !== 0) {\n                    row.closeRow();\n                }\n            }\n        });\n    }\n\n    manuallyOpenAllRows(toValue) {\n        Object.keys(this._rows).forEach(rowKey => {\n            const row = this._rows[rowKey];\n            if (row && row.manuallySwipeRow) {\n                row.manuallySwipeRow(toValue);\n            }\n        });\n    }\n\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n        if (!HiddenComponent) {\n            return React.cloneElement(VisibleComponent, {\n                ...VisibleComponent.props,\n                ref: row => (this._rows[key] = row),\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\n                onRowDidOpen: toValue =>\n                    this.props.onRowDidOpen &&\n                    this.props.onRowDidOpen(key, this._rows, toValue),\n                onRowClose: () =>\n                    this.props.onRowClose &&\n                    this.props.onRowClose(key, this._rows),\n                onRowDidClose: () =>\n                    this.props.onRowDidClose &&\n                    this.props.onRowDidClose(key, this._rows),\n                onRowPress: () => this.onRowPress(),\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\n                swipeGestureEnded: (_, data) =>\n                    this.rowSwipeGestureEnded(key, data),\n            });\n        } else {\n            return (\n                <SwipeRow\n                    onSwipeValueChange={\n                        this.props.onSwipeValueChange\n                            ? data =>\n                                  this.props.onSwipeValueChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    ref={row => (this._rows[key] = row)}\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\n                    swipeGestureEnded={(_, data) =>\n                        this.rowSwipeGestureEnded(key, data)\n                    }\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\n                    onRowDidOpen={toValue =>\n                        this.props.onRowDidOpen &&\n                        this.props.onRowDidOpen(key, this._rows, toValue)\n                    }\n                    onRowClose={() =>\n                        this.props.onRowClose &&\n                        this.props.onRowClose(key, this._rows)\n                    }\n                    onRowDidClose={() =>\n                        this.props.onRowDidClose &&\n                        this.props.onRowDidClose(key, this._rows)\n                    }\n                    onRowPress={() => this.onRowPress(key)}\n                    leftActivationValue={\n                        item.leftActivationValue ||\n                        this.props.leftActivationValue\n                    }\n                    rightActivationValue={\n                        item.rightActivationValue ||\n                        this.props.rightActivationValue\n                    }\n                    leftActionValue={\n                        item.leftActionValue || this.props.leftActionValue || 0\n                    }\n                    rightActionValue={\n                        item.rightActionValue ||\n                        this.props.rightActionValue ||\n                        0\n                    }\n                    initialLeftActionState={\n                        item.initialLeftActionState ||\n                        this.props.initialLeftActionState\n                    }\n                    initialRightActionState={\n                        item.initialRightActionState ||\n                        this.props.initialRightActionState\n                    }\n                    onLeftAction={() =>\n                        item.onLeftAction ||\n                        (this.props.onLeftAction &&\n                            this.props.onLeftAction(key, this._rows))\n                    }\n                    onRightAction={() =>\n                        item.onRightAction ||\n                        (this.props.onRightAction &&\n                            this.props.onRightAction(key, this._rows))\n                    }\n                    onLeftActionStatusChange={\n                        this.props.onLeftActionStatusChange\n                            ? data =>\n                                  this.props.onLeftActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    onRightActionStatusChange={\n                        this.props.onRightActionStatusChange\n                            ? data =>\n                                  this.props.onRightActionStatusChange({\n                                      ...data,\n                                      key,\n                                  })\n                            : null\n                    }\n                    shouldItemUpdate={\n                        this.props.shouldItemUpdate\n                            ? (currentItem, newItem) =>\n                                  this.props.shouldItemUpdate(\n                                      currentItem,\n                                      newItem\n                                  )\n                            : null\n                    }\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\n                    leftOpenValue={\n                        item.leftOpenValue || this.props.leftOpenValue\n                    }\n                    rightOpenValue={\n                        item.rightOpenValue || this.props.rightOpenValue\n                    }\n                    closeOnRowPress={\n                        item.closeOnRowPress || this.props.closeOnRowPress\n                    }\n                    disableLeftSwipe={\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\n                    }\n                    disableRightSwipe={\n                        item.disableRightSwipe || this.props.disableRightSwipe\n                    }\n                    stopLeftSwipe={\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\n                    }\n                    stopRightSwipe={\n                        item.stopRightSwipe || this.props.stopRightSwipe\n                    }\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\n                    disableHiddenLayoutCalculation={\n                        this.props.disableHiddenLayoutCalculation\n                    }\n                    style={this.props.swipeRowStyle}\n                    preview={shouldPreviewRow}\n                    previewDuration={this.props.previewDuration}\n                    previewOpenDelay={this.props.previewOpenDelay}\n                    previewOpenValue={this.props.previewOpenValue}\n                    previewRepeat={this.props.previewRepeat}\n                    previewRepeatDelay={this.props.previewRepeatDelay}\n                    tension={this.props.tension}\n                    restSpeedThreshold={this.props.restSpeedThreshold}\n                    restDisplacementThreshold={\n                        this.props.restDisplacementThreshold\n                    }\n                    friction={this.props.friction}\n                    directionalDistanceChangeThreshold={\n                        this.props.directionalDistanceChangeThreshold\n                    }\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\n                    swipeToOpenVelocityContribution={\n                        this.props.swipeToOpenVelocityContribution\n                    }\n                    swipeToClosePercent={this.props.swipeToClosePercent}\n                    item={item} // used for should item update comparisons\n                    useNativeDriver={this.props.useNativeDriver}\n                    onPreviewEnd={this.props.onPreviewEnd}\n                >\n                    {HiddenComponent}\n                    {VisibleComponent}\n                </SwipeRow>\n            );\n        }\n    }\n\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\n    renderRow(rowData, secId, rowId, rowMap) {\n        const key = `${secId}${rowId}`;\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenRow &&\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n        const previewRowId =\n            this.props.dataSource &&\n            this.props.dataSource.getRowIDForFlatIndex(\n                this.props.previewRowIndex || 0\n            );\n        const shouldPreviewRow =\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\n            rowId === previewRowId;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            rowData,\n            shouldPreviewRow\n        );\n    }\n\n    renderItem(rowData, rowMap) {\n        const Component = this.props.renderItem(rowData, rowMap);\n        const HiddenComponent =\n            this.props.renderHiddenItem &&\n            this.props.renderHiddenItem(rowData, rowMap);\n        const { item, index } = rowData;\n        let { key } = item;\n        if (this.props.keyExtractor) {\n            key = this.props.keyExtractor(item, index);\n        }\n\n        const shouldPreviewRow =\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\n\n        return this.renderCell(\n            Component,\n            HiddenComponent,\n            key,\n            item,\n            shouldPreviewRow\n        );\n    }\n\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\n\n    _onRef = c => this.setRefs(c);\n\n    render() {\n        const { useSectionList, renderListView, ...props } = this.props;\n\n        if (renderListView) {\n            // Ideally renderRow should be deprecated. We do this check for\n            // legacy purposes to not break certain renderListView cases\n            const useRenderRow = !!this.props.renderRow;\n            return renderListView(\n                props,\n                this.setRefs.bind(this),\n                this.onScroll.bind(this),\n                useRenderRow\n                    ? this.renderRow.bind(this, this._rows)\n                    : this.renderItem.bind(this)\n            );\n        }\n\n        if (useSectionList) {\n            const ListComponent = this.props.useAnimatedList\n                ? Animated.SectionList\n                : SectionList;\n            return (\n                <ListComponent\n                    {...props}\n                    {...this.listViewProps}\n                    ref={this._onRef}\n                    onScroll={this._onScroll}\n                    renderItem={this._renderItem}\n                />\n            );\n        }\n        const ListComponent = this.props.useAnimatedList\n            ? Animated.FlatList\n            : FlatList;\n        return (\n            <ListComponent\n                {...props}\n                {...this.listViewProps}\n                ref={this._onRef}\n                onScroll={this._onScroll}\n                renderItem={this._renderItem}\n            />\n        );\n    }\n}\n\nSwipeListView.propTypes = {\n    /**\n     * To render a custom ListView component, if you don't want to use ReactNative one.\n     * Note: This will call `renderRow`, not `renderItem`\n     */\n    renderListView: PropTypes.func,\n    /**\n     * How to render a row in a FlatList. Should return a valid React Element.\n     */\n    renderItem: PropTypes.func,\n    /**\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\n     * This is required unless renderItem is passing a SwipeRow.\n     */\n    renderHiddenItem: PropTypes.func,\n    /**\n     * TranslateX value for opening the row to the left (positive number)\n     */\n    leftOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for opening the row to the right (negative number)\n     */\n    rightOpenValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\n     */\n    leftActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for firing onRightActionStatusChange (negative number)\n     */\n    rightActivationValue: PropTypes.number,\n    /**\n     * TranslateX value for left action to which the row will be shifted after gesture release\n     */\n    leftActionValue: PropTypes.number,\n    /**\n     * TranslateX value for right action to which the row will be shifted after gesture release\n     */\n    rightActionValue: PropTypes.number,\n    /**\n     * Initial value for left action state (default is false)\n     */\n    initialLeftActionState: PropTypes.bool,\n    /**\n     * Initial value for right action state (default is false)\n     */\n    initialRightActionState: PropTypes.bool,\n    /**\n     * TranslateX value for stop the row to the left (positive number)\n     */\n    stopLeftSwipe: PropTypes.number,\n    /**\n     * TranslateX value for stop the row to the right (negative number)\n     */\n    stopRightSwipe: PropTypes.number,\n    /**\n     * Should open rows be closed when the listView begins scrolling\n     */\n    closeOnScroll: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row is pressed\n     */\n    closeOnRowPress: PropTypes.bool,\n    /**\n     * Should open rows be closed when a row begins to swipe open\n     */\n    closeOnRowBeginSwipe: PropTypes.bool,\n    /**\n     * Should open rows be closed when another row is opened\n     */\n    closeOnRowOpen: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows left\n     */\n    disableLeftSwipe: PropTypes.bool,\n    /**\n     * Disable ability to swipe rows right\n     */\n    disableRightSwipe: PropTypes.bool,\n    /**\n     * Enable hidden row onLayout calculations to run always.\n     *\n     * By default, hidden row size calculations are only done on the first onLayout event\n     * for performance reasons.\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\n     * You may want to do this if your rows' sizes can change.\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\n     */\n    recalculateHiddenLayout: PropTypes.bool,\n    /**\n     * Disable hidden row onLayout calculations\n     *\n     * Instead, {width: '100%', height: '100%'} will be used.\n     * Improves performance by avoiding component updates, while still working with orientation changes.\n     */\n    disableHiddenLayoutCalculation: PropTypes.bool,\n    /**\n     * Called when a swipe row is animating swipe\n     */\n    swipeGestureBegan: PropTypes.func,\n    /**\n     * Called when user has ended their swipe gesture\n     */\n    swipeGestureEnded: PropTypes.func,\n    /**\n     * Called when a swipe row is animating open\n     */\n    onRowOpen: PropTypes.func,\n    /**\n     * Called when a swipe row has animated open\n     */\n    onRowDidOpen: PropTypes.func,\n    /**\n     * Called when a swipe row is animating closed\n     */\n    onRowClose: PropTypes.func,\n    /**\n     * Called when a swipe row has animated closed\n     */\n    onRowDidClose: PropTypes.func,\n    /**\n     * Called when row shifted to leftActivationValue\n     */\n    onLeftAction: PropTypes.func,\n    /**\n     * Called when row shifted to rightActivationValue\n     */\n    onRightAction: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the leftActivationValue\n     */\n    onLeftActionStatusChange: PropTypes.func,\n    /**\n     * Called once when swipe value crosses the rightActivationValue\n     */\n    onRightActionStatusChange: PropTypes.func,\n    /**\n     * Called when scrolling on the SwipeListView has been enabled/disabled\n     */\n    onScrollEnabled: PropTypes.func,\n    /**\n     * Called when a scroll event is emitted\n     */\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Styles for the parent wrapper View of the SwipeRow\n     */\n    swipeRowStyle: PropTypes.object,\n    /**\n     * Called when the FlatList ref is set and passes a ref to the FlatList\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\n     */\n    listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    /**\n     * Should the row with this key do a slide out preview to show that the list is swipeable\n     */\n    previewRowKey: PropTypes.string,\n    /**\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\n     */\n    previewFirstRow: PropTypes.bool,\n    /**\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\n     * Note: This ID will be passed to this function to get the correct row index\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\n     */\n    previewRowIndex: PropTypes.number,\n    /**\n     * Duration of the slide out preview animation (milliseconds)\n     */\n    previewDuration: PropTypes.number,\n    /**\n     * Should the animation repeat until false is provided\n     */\n    previewRepeat: PropTypes.bool,\n    /**\n     * Time between each full completed animation in milliseconds\n     * Default: 1000 (1 second)\n     */\n    previewRepeatDelay: PropTypes.number,\n    /**\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\n     */\n    previewOpenDelay: PropTypes.number,\n    /**\n     * TranslateX value for the slide out preview animation\n     * Default: 0.5 * props.rightOpenValue\n     */\n    previewOpenValue: PropTypes.number,\n    /**\n     * Friction for the open / close animation\n     */\n    friction: PropTypes.number,\n    /**\n     * Tension for the open / close animation\n     */\n    tension: PropTypes.number,\n    /**\n     * RestSpeedThreshold for the open / close animation\n     */\n    restSpeedThreshold: PropTypes.number,\n    /**\n     * RestDisplacementThreshold for the open / close animation\n     */\n    restDisplacementThreshold: PropTypes.number,\n    /**\n     * The dx value used to detect when a user has begun a swipe gesture\n     */\n    directionalDistanceChangeThreshold: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row opening.\n     */\n    swipeToOpenPercent: PropTypes.number,\n    /**\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\n     * and it'll just take into consideration the swipeToOpenPercent.\n     */\n    swipeToOpenVelocityContribution: PropTypes.number,\n    /**\n     * What % of the left/right openValue does the user need to swipe\n     * past to trigger the row closing.\n     */\n    swipeToClosePercent: PropTypes.number,\n    /**\n     * callback to determine whether component should update (currentItem, newItem)\n     */\n    shouldItemUpdate: PropTypes.func,\n    /**\n     * Callback invoked any time the swipe value of a SwipeRow is changed\n     */\n    onSwipeValueChange: PropTypes.func,\n    /**\n     * useNativeDriver: true for all animations where possible\n     */\n    useNativeDriver: PropTypes.bool,\n    /**\n     * Use Animated.Flatlist or Animated.Sectionlist\n     */\n    useAnimatedList: PropTypes.bool,\n    /**\n     * keyExtractor: function to generate key value for each row in the list\n     */\n    keyExtractor: PropTypes.func,\n    /**\n     * Callback that runs after row swipe preview is finished\n     */\n    onPreviewEnd: PropTypes.func,\n};\n\nSwipeListView.defaultProps = {\n    leftOpenValue: 0,\n    rightOpenValue: 0,\n    closeOnRowBeginSwipe: false,\n    closeOnScroll: true,\n    closeOnRowPress: true,\n    closeOnRowOpen: true,\n    disableLeftSwipe: false,\n    disableRightSwipe: false,\n    recalculateHiddenLayout: false,\n    disableHiddenLayoutCalculation: false,\n    previewFirstRow: false,\n    directionalDistanceChangeThreshold: 2,\n    swipeToOpenPercent: 50,\n    swipeToOpenVelocityContribution: 0,\n    swipeToClosePercent: 50,\n    useNativeDriver: true,\n    previewRepeat: false,\n    previewRepeatDelay: 1000,\n    useAnimatedList: false,\n};\n\nexport default SwipeListView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}