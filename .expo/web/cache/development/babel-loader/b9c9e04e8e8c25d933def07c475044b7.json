{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { WelcomeScreen } from \"../screens/auth/WelcomeScreen\";\nimport { LoginScreen } from \"../screens/auth/Login\";\nimport { RegisterScreen } from \"../screens/auth/Register\";\nimport { OtpScreen } from \"../screens/auth/Otp\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport i18n from \"../language/i18n\";\nimport React, { useEffect } from \"react\";\nimport * as Localization from \"expo-localization\";\nimport * as Updates from \"expo-updates\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport function getLanguage() {\n  var code;\n  return _regeneratorRuntime.async(function getLanguage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"languageCode\"));\n\n        case 3:\n          code = _context.sent;\n\n          if (!(code == null)) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", \"en\");\n\n        case 8:\n          if (!(code === \"ar\")) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(Localization.isRTL));\n\n        case 11:\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(Localization.isRTL));\n\n        case 13:\n          _context.next = 19;\n          break;\n\n        case 15:\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(Localization.isRTL));\n\n        case 17:\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(Localization.isRTL));\n\n        case 19:\n          i18n.changeLanguage(code);\n          return _context.abrupt(\"return\", code);\n\n        case 21:\n          _context.next = 26;\n          break;\n\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 26:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 23]], Promise);\n}\nexport function setLanguage(value) {\n  var oldLang, result;\n  return _regeneratorRuntime.async(function setLanguage$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"languageCode\"));\n\n        case 2:\n          oldLang = _context2.sent;\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"languageCode\", value));\n\n        case 6:\n          result = _context2.sent;\n          i18n.changeLanguage(value);\n\n          if (!(value === \"ar\")) {\n            _context2.next = 16;\n            break;\n          }\n\n          _context2.next = 11;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(true));\n\n        case 11:\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(true));\n\n        case 13:\n          Updates.reloadAsync();\n          _context2.next = 22;\n          break;\n\n        case 16:\n          if (!(oldLang === \"ar\")) {\n            _context2.next = 22;\n            break;\n          }\n\n          _context2.next = 19;\n          return _regeneratorRuntime.awrap(I18nManager.forceRTL(false));\n\n        case 19:\n          _context2.next = 21;\n          return _regeneratorRuntime.awrap(I18nManager.allowRTL(false));\n\n        case 21:\n          Updates.reloadAsync();\n\n        case 22:\n          return _context2.abrupt(\"return\", result);\n\n        case 25:\n          _context2.prev = 25;\n          _context2.t0 = _context2[\"catch\"](3);\n          console.log(_context2.t0);\n\n        case 28:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 25]], Promise);\n}\nexport var AccountNavigator = function AccountNavigator() {\n  useEffect(function () {\n    getLanguage();\n  }, []);\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"WelcomeScreen\",\n      component: WelcomeScreen\n    }), _jsx(Stack.Screen, {\n      name: \"LoginScreen\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"RegisterScreen\",\n      component: RegisterScreen\n    }), _jsx(Stack.Screen, {\n      name: \"OtpScreen\",\n      component: OtpScreen\n    })]\n  });\n};","map":{"version":3,"names":["createStackNavigator","WelcomeScreen","LoginScreen","RegisterScreen","OtpScreen","AsyncStorage","i18n","React","useEffect","Localization","Updates","Stack","getLanguage","getItem","code","I18nManager","forceRTL","isRTL","allowRTL","changeLanguage","console","log","setLanguage","value","oldLang","setItem","result","reloadAsync","AccountNavigator","headerShown"],"sources":["/Users/nicolamelito/Desktop/Tu-Store/src/navigation/AccountNavigator.js"],"sourcesContent":["import { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { WelcomeScreen } from \"../screens/auth/WelcomeScreen\";\r\nimport { LoginScreen } from \"../screens/auth/Login\";\r\nimport { RegisterScreen } from \"../screens/auth/Register\";\r\nimport { OtpScreen } from \"../screens/auth/Otp\";\r\nimport { I18nManager } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport i18n from \"../language/i18n\";\r\nimport React, { useEffect } from \"react\";\r\nimport * as Localization from \"expo-localization\";\r\nimport * as Updates from \"expo-updates\";\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport async function getLanguage() {\r\n  try {\r\n    const code = await AsyncStorage.getItem(\"languageCode\");\r\n    if (code == null) {\r\n      return \"en\";\r\n    } else {\r\n      if (code === \"ar\") {\r\n        await I18nManager.forceRTL(Localization.isRTL);\r\n        await I18nManager.allowRTL(Localization.isRTL);\r\n      } else {\r\n        await I18nManager.forceRTL(Localization.isRTL);\r\n        await I18nManager.allowRTL(Localization.isRTL);\r\n      }\r\n      i18n.changeLanguage(code);\r\n      return code;\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function setLanguage(value) {\r\n  const oldLang = await AsyncStorage.getItem(\"languageCode\");\r\n  try {\r\n    const result = await AsyncStorage.setItem(\"languageCode\", value);\r\n    i18n.changeLanguage(value);\r\n    if (value === \"ar\") {\r\n      await I18nManager.forceRTL(true);\r\n      await I18nManager.allowRTL(true);\r\n      Updates.reloadAsync();\r\n    } else if (oldLang === \"ar\") {\r\n      await I18nManager.forceRTL(false);\r\n      await I18nManager.allowRTL(false);\r\n      Updates.reloadAsync();\r\n    }\r\n    return result;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\nexport const AccountNavigator = () => {\r\n  useEffect(() => {\r\n    getLanguage();\r\n  }, []);\r\n  return (\r\n    <Stack.Navigator\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <Stack.Screen\r\n        name=\"WelcomeScreen\"\r\n        component={WelcomeScreen}\r\n      ></Stack.Screen>\r\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen}></Stack.Screen>\r\n      <Stack.Screen\r\n        name=\"RegisterScreen\"\r\n        component={RegisterScreen}\r\n      ></Stack.Screen>\r\n      <Stack.Screen name=\"OtpScreen\" component={OtpScreen}></Stack.Screen>\r\n    </Stack.Navigator>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}