{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\nexport default {\n  get name() {\n    return 'ExpoDocumentPicker';\n  },\n  getDocumentAsync: function getDocumentAsync(_ref) {\n    var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? '*/*' : _ref$type,\n      _ref$multiple = _ref.multiple,\n      multiple = _ref$multiple === void 0 ? false : _ref$multiple;\n    return function _callee() {\n      var input;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Platform.isDOMAvailable) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                type: 'cancel'\n              });\n            case 2:\n              input = document.createElement('input');\n              input.style.display = 'none';\n              input.setAttribute('type', 'file');\n              input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n              input.setAttribute('id', uuidv4());\n              if (multiple) {\n                input.setAttribute('multiple', 'multiple');\n              }\n              document.body.appendChild(input);\n              return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                input.addEventListener('change', function () {\n                  if (input.files) {\n                    var targetFile = input.files[0];\n                    var mimeType = targetFile.type;\n                    var reader = new FileReader();\n                    reader.onerror = function () {\n                      reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n                    };\n                    reader.onload = function (_ref2) {\n                      var target = _ref2.target;\n                      var uri = target.result;\n                      resolve({\n                        type: 'success',\n                        uri: uri,\n                        mimeType: mimeType,\n                        name: targetFile.name,\n                        file: targetFile,\n                        lastModified: targetFile.lastModified,\n                        size: targetFile.size,\n                        output: input.files\n                      });\n                    };\n                    reader.readAsDataURL(targetFile);\n                  } else {\n                    resolve({\n                      type: 'cancel'\n                    });\n                  }\n                  document.body.removeChild(input);\n                });\n                var event = new MouseEvent('click');\n                input.dispatchEvent(event);\n              }));\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":";AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAInC,eAAe;EACb,IAAIC,IAAI;IACN,OAAO,oBAAoB;EAC7B,CAAC;EAEKC,gBAAgB,kCAGE;IAAA,qBAFtBC,IAAI;MAAJA,IAAI,0BAAG,KAAK;MAAA,qBACZC,QAAQ;MAARA,QAAQ,8BAAG,KAAK;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IAGXN,QAAQ,CAACO,cAAc;gBAAA;gBAAA;cAAA;cAAA,iCACnB;gBAAEF,IAAI,EAAE;cAAQ,CAAE;YAAA;cAGrBG,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;cAC7CF,KAAK,CAACG,KAAK,CAACC,OAAO,GAAG,MAAM;cAC5BJ,KAAK,CAACK,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;cAClCL,KAAK,CAACK,YAAY,CAAC,QAAQ,EAAEC,KAAK,CAACC,OAAO,CAACV,IAAI,CAAC,GAAGA,IAAI,CAACW,IAAI,CAAC,GAAG,CAAC,GAAGX,IAAI,CAAC;cACzEG,KAAK,CAACK,YAAY,CAAC,IAAI,EAAEX,MAAM,EAAE,CAAC;cAClC,IAAII,QAAQ,EAAE;gBACZE,KAAK,CAACK,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;;cAG5CJ,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,KAAK,CAAC;cAAC,iCAE1B,IAAIW,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAI;gBACrCb,KAAK,CAACc,gBAAgB,CAAC,QAAQ,EAAE,YAAK;kBACpC,IAAId,KAAK,CAACe,KAAK,EAAE;oBACf,IAAMC,UAAU,GAAGhB,KAAK,CAACe,KAAK,CAAC,CAAC,CAAC;oBACjC,IAAME,QAAQ,GAAGD,UAAU,CAACnB,IAAI;oBAChC,IAAMqB,MAAM,GAAG,IAAIC,UAAU,EAAE;oBAC/BD,MAAM,CAACE,OAAO,GAAG,YAAK;sBACpBP,MAAM,CAAC,IAAIQ,KAAK,mEAAmE,CAAC;oBACtF,CAAC;oBACDH,MAAM,CAACI,MAAM,GAAG,iBAAe;sBAAA,IAAZC,MAAM,SAANA,MAAM;sBACvB,IAAMC,GAAG,GAAID,MAAc,CAACE,MAAM;sBAClCb,OAAO,CAAC;wBACNf,IAAI,EAAE,SAAS;wBACf2B,GAAG,EAAHA,GAAG;wBACHP,QAAQ,EAARA,QAAQ;wBACRtB,IAAI,EAAEqB,UAAU,CAACrB,IAAI;wBACrB+B,IAAI,EAAEV,UAAU;wBAChBW,YAAY,EAAEX,UAAU,CAACW,YAAY;wBACrCC,IAAI,EAAEZ,UAAU,CAACY,IAAI;wBACrBC,MAAM,EAAE7B,KAAK,CAACe;uBACf,CAAC;oBACJ,CAAC;oBAEDG,MAAM,CAACY,aAAa,CAACd,UAAU,CAAC;mBACjC,MAAM;oBACLJ,OAAO,CAAC;sBAAEf,IAAI,EAAE;oBAAQ,CAAE,CAAC;;kBAG7BI,QAAQ,CAACQ,IAAI,CAACsB,WAAW,CAAC/B,KAAK,CAAC;gBAClC,CAAC,CAAC;gBAEF,IAAMgC,KAAK,GAAG,IAAIC,UAAU,CAAC,OAAO,CAAC;gBACrCjC,KAAK,CAACkC,aAAa,CAACF,KAAK,CAAC;cAC5B,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EACJ;CACD","names":["Platform","v4","uuidv4","name","getDocumentAsync","type","multiple","isDOMAvailable","input","document","createElement","style","display","setAttribute","Array","isArray","join","body","appendChild","Promise","resolve","reject","addEventListener","files","targetFile","mimeType","reader","FileReader","onerror","Error","onload","target","uri","result","file","lastModified","size","output","readAsDataURL","removeChild","event","MouseEvent","dispatchEvent"],"sourceRoot":"","sources":["../src/ExpoDocumentPicker.web.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { DocumentPickerOptions, DocumentResult } from './types';\n\nexport default {\n  get name(): string {\n    return 'ExpoDocumentPicker';\n  },\n\n  async getDocumentAsync({\n    type = '*/*',\n    multiple = false,\n  }: DocumentPickerOptions): Promise<DocumentResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { type: 'cancel' };\n    }\n\n    const input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file');\n    input.setAttribute('accept', Array.isArray(type) ? type.join(',') : type);\n    input.setAttribute('id', uuidv4());\n    if (multiple) {\n      input.setAttribute('multiple', 'multiple');\n    }\n\n    document.body.appendChild(input);\n\n    return new Promise((resolve, reject) => {\n      input.addEventListener('change', () => {\n        if (input.files) {\n          const targetFile = input.files[0];\n          const mimeType = targetFile.type;\n          const reader = new FileReader();\n          reader.onerror = () => {\n            reject(new Error(`Failed to read the selected media because the operation failed.`));\n          };\n          reader.onload = ({ target }) => {\n            const uri = (target as any).result;\n            resolve({\n              type: 'success',\n              uri,\n              mimeType,\n              name: targetFile.name,\n              file: targetFile,\n              lastModified: targetFile.lastModified,\n              size: targetFile.size,\n              output: input.files,\n            });\n          };\n          // Read in the image file as a binary string.\n          reader.readAsDataURL(targetFile);\n        } else {\n          resolve({ type: 'cancel' });\n        }\n\n        document.body.removeChild(input);\n      });\n\n      const event = new MouseEvent('click');\n      input.dispatchEvent(event);\n    });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}