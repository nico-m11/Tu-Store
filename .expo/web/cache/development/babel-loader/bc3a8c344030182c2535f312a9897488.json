{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StringFormat } from \"../Clipboard.types\";\nimport { ClipboardUnavailableException, CopyFailureException, NoPermissionException, PasteFailureException } from \"./Exceptions\";\nimport { base64toBlob, blobToBase64Async, findHtmlInClipboardAsync, findImageInClipboardAsync, getImageSizeFromBlobAsync, htmlToPlainText, isClipboardPermissionDeniedAsync } from \"./Utils\";\nexport default {\n  get name() {\n    return 'ExpoClipboard';\n  },\n  getStringAsync: function getStringAsync(options) {\n    return function _callee() {\n      var clipboardItems, blob, text, _clipboardItems, _blob, blobText;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context.next = 2;\n                break;\n              }\n              throw new ClipboardUnavailableException();\n            case 2:\n              _context.prev = 2;\n              _context.t0 = options.preferredFormat;\n              _context.next = _context.t0 === StringFormat.HTML ? 6 : 19;\n              break;\n            case 6:\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n            case 8:\n              clipboardItems = _context.sent;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(findHtmlInClipboardAsync(clipboardItems));\n            case 11:\n              blob = _context.sent;\n              if (blob) {\n                _context.next = 16;\n                break;\n              }\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n            case 15:\n              return _context.abrupt(\"return\", _context.sent);\n            case 16:\n              _context.next = 18;\n              return _regeneratorRuntime.awrap(new Response(blob).text());\n            case 18:\n              return _context.abrupt(\"return\", _context.sent);\n            case 19:\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(navigator.clipboard.readText());\n            case 21:\n              text = _context.sent;\n              if (!(!text || text === '')) {\n                _context.next = 33;\n                break;\n              }\n              _context.next = 25;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n            case 25:\n              _clipboardItems = _context.sent;\n              _context.next = 28;\n              return _regeneratorRuntime.awrap(findHtmlInClipboardAsync(_clipboardItems));\n            case 28:\n              _blob = _context.sent;\n              _context.next = 31;\n              return _regeneratorRuntime.awrap(_blob == null ? void 0 : _blob.text());\n            case 31:\n              blobText = _context.sent;\n              text = htmlToPlainText(blobText != null ? blobText : '');\n            case 33:\n              return _context.abrupt(\"return\", text);\n            case 34:\n              _context.next = 52;\n              break;\n            case 36:\n              _context.prev = 36;\n              _context.t1 = _context[\"catch\"](2);\n              _context.t2 = _context.t1.name === 'NotAllowedError';\n              if (_context.t2) {\n                _context.next = 43;\n                break;\n              }\n              _context.next = 42;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n            case 42:\n              _context.t2 = _context.sent;\n            case 43:\n              if (!_context.t2) {\n                _context.next = 45;\n                break;\n              }\n              throw new NoPermissionException();\n            case 45:\n              _context.prev = 45;\n              return _context.abrupt(\"return\", window.clipboardData.getData('Text'));\n            case 49:\n              _context.prev = 49;\n              _context.t3 = _context[\"catch\"](45);\n              return _context.abrupt(\"return\", Promise.reject(new Error('Unable to retrieve item from clipboard')));\n            case 52:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[2, 36], [45, 49]], Promise);\n    }();\n  },\n  setString: function setString(text) {\n    var textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch (_unused2) {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  setStringAsync: function setStringAsync(text, options) {\n    var _this = this;\n    return function _callee2() {\n      var clipboardItemInput;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = options.inputFormat;\n              _context2.next = _context2.t0 === StringFormat.HTML ? 3 : 22;\n              break;\n            case 3:\n              if (navigator.clipboard) {\n                _context2.next = 5;\n                break;\n              }\n              throw new ClipboardUnavailableException();\n            case 5:\n              _context2.prev = 5;\n              clipboardItemInput = createHtmlClipboardItem(text);\n              _context2.next = 9;\n              return _regeneratorRuntime.awrap(navigator.clipboard.write([clipboardItemInput]));\n            case 9:\n              return _context2.abrupt(\"return\", true);\n            case 12:\n              _context2.prev = 12;\n              _context2.t1 = _context2[\"catch\"](5);\n              _context2.t2 = _context2.t1.name === 'NotAllowedError';\n              if (_context2.t2) {\n                _context2.next = 19;\n                break;\n              }\n              _context2.next = 18;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n            case 18:\n              _context2.t2 = _context2.sent;\n            case 19:\n              if (!_context2.t2) {\n                _context2.next = 21;\n                break;\n              }\n              throw new NoPermissionException();\n            case 21:\n              throw new CopyFailureException(_context2.t1.message);\n            case 22:\n              return _context2.abrupt(\"return\", _this.setString(text));\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[5, 12]], Promise);\n    }();\n  },\n  hasStringAsync: function hasStringAsync() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(clipboardHasTypesAsync(['text/plain', 'text/html']));\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getImageAsync: function getImageAsync(_options) {\n    return function _callee4() {\n      var clipboardItems, blob, _await$Promise$all, _await$Promise$all2, data, size;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context4.next = 2;\n                break;\n              }\n              throw new ClipboardUnavailableException();\n            case 2:\n              _context4.prev = 2;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(navigator.clipboard.read());\n            case 5:\n              clipboardItems = _context4.sent;\n              _context4.next = 8;\n              return _regeneratorRuntime.awrap(findImageInClipboardAsync(clipboardItems));\n            case 8:\n              blob = _context4.sent;\n              if (blob) {\n                _context4.next = 11;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 11:\n              _context4.next = 13;\n              return _regeneratorRuntime.awrap(Promise.all([blobToBase64Async(blob), getImageSizeFromBlobAsync(blob)]));\n            case 13:\n              _await$Promise$all = _context4.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              data = _await$Promise$all2[0];\n              size = _await$Promise$all2[1];\n              return _context4.abrupt(\"return\", {\n                data: data,\n                size: size\n              });\n            case 20:\n              _context4.prev = 20;\n              _context4.t0 = _context4[\"catch\"](2);\n              _context4.t1 = _context4.t0.name === 'NotAllowedError';\n              if (_context4.t1) {\n                _context4.next = 27;\n                break;\n              }\n              _context4.next = 26;\n              return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n            case 26:\n              _context4.t1 = _context4.sent;\n            case 27:\n              if (!_context4.t1) {\n                _context4.next = 29;\n                break;\n              }\n              throw new NoPermissionException();\n            case 29:\n              throw new PasteFailureException(_context4.t0.message);\n            case 30:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[2, 20]], Promise);\n    }();\n  },\n  setImageAsync: function setImageAsync(base64image) {\n    return function _callee5() {\n      var blob;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (navigator.clipboard) {\n                _context5.next = 2;\n                break;\n              }\n              throw new ClipboardUnavailableException();\n            case 2:\n              _context5.prev = 2;\n              blob = base64toBlob(base64image, 'image/png');\n              _context5.next = 6;\n              return _regeneratorRuntime.awrap(navigator.clipboard.write([\n              new ClipboardItem(_defineProperty({}, blob.type, blob))]));\n            case 6:\n              _context5.next = 11;\n              break;\n            case 8:\n              _context5.prev = 8;\n              _context5.t0 = _context5[\"catch\"](2);\n              throw new CopyFailureException(_context5.t0.message);\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[2, 8]], Promise);\n    }();\n  },\n  hasImageAsync: function hasImageAsync() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(clipboardHasTypesAsync(['image/png', 'image/jpeg']));\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  addClipboardListener: function addClipboardListener() {},\n  removeClipboardListener: function removeClipboardListener() {}\n};\nfunction clipboardHasTypesAsync(types) {\n  var clipboardItems;\n  return _regeneratorRuntime.async(function clipboardHasTypesAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (navigator.clipboard) {\n            _context7.next = 2;\n            break;\n          }\n          throw new ClipboardUnavailableException();\n        case 2:\n          _context7.prev = 2;\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(navigator.clipboard.read());\n        case 5:\n          clipboardItems = _context7.sent;\n          return _context7.abrupt(\"return\", clipboardItems.flatMap(function (item) {\n            return item.types;\n          }).some(function (type) {\n            return types.includes(type);\n          }));\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](2);\n          _context7.t1 = _context7.t0.name === 'NotAllowedError';\n          if (_context7.t1) {\n            _context7.next = 16;\n            break;\n          }\n          _context7.next = 15;\n          return _regeneratorRuntime.awrap(isClipboardPermissionDeniedAsync());\n        case 15:\n          _context7.t1 = _context7.sent;\n        case 16:\n          if (!_context7.t1) {\n            _context7.next = 18;\n            break;\n          }\n          throw new NoPermissionException();\n        case 18:\n          throw _context7.t0;\n        case 19:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[2, 9]], Promise);\n}\nfunction createHtmlClipboardItem(htmlString) {\n  return new ClipboardItem({\n    'text/html': new Blob([htmlString], {\n      type: 'text/html'\n    }),\n    'text/plain': new Blob([htmlToPlainText(htmlString)], {\n      type: 'text/plain'\n    })\n  });\n}","map":{"version":3,"mappings":";;;AAAA,SAKEA,YAAY;AAEd,SACEC,6BAA6B,EAC7BC,oBAAoB,EACpBC,qBAAqB,EACrBC,qBAAqB;AAEvB,SACEC,YAAY,EACZC,iBAAiB,EACjBC,wBAAwB,EACxBC,yBAAyB,EACzBC,yBAAyB,EACzBC,eAAe,EACfC,gCAAgC;AAGlC,eAAe;EACb,IAAIC,IAAI;IACN,OAAO,eAAe;EACxB,CAAC;EACKC,cAAc,0BAACC,OAAyB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACvCC,SAAS,CAACC,SAAS;gBAAA;gBAAA;cAAA;cAAA,MAChB,IAAIf,6BAA6B,EAAE;YAAA;cAAA;cAAA,cAIjCa,OAAO,CAACG,eAAe;cAAA,gCACxBjB,YAAY,CAACkB,IAAI;cAAA;YAAA;cAAA;cAAA,iCAESH,SAAS,CAACC,SAAS,CAACG,IAAI,EAAE;YAAA;cAAjDC,cAAc;cAAA;cAAA,iCACDb,wBAAwB,CAACa,cAAc,CAAC;YAAA;cAArDC,IAAI;cAAA,IACLA,IAAI;gBAAA;gBAAA;cAAA;cAAA;cAAA,iCAEMN,SAAS,CAACC,SAAS,CAACM,QAAQ,EAAE;YAAA;cAAA;YAAA;cAAA;cAAA,iCAEhC,IAAIC,QAAQ,CAACF,IAAI,CAAC,CAACG,IAAI,EAAE;YAAA;cAAA;YAAA;cAAA;cAAA,iCAGrBT,SAAS,CAACC,SAAS,CAACM,QAAQ,EAAE;YAAA;cAA3CE,IAAI;cAAA,MACJ,CAACA,IAAI,IAAIA,IAAI,KAAK,EAAE;gBAAA;gBAAA;cAAA;cAAA;cAAA,iCAEOT,SAAS,CAACC,SAAS,CAACG,IAAI,EAAE;YAAA;cAAjDC,eAAc;cAAA;cAAA,iCACDb,wBAAwB,CAACa,eAAc,CAAC;YAAA;cAArDC,KAAI;cAAA;cAAA,iCACaA,KAAI,oBAAJA,KAAI,CAAEG,IAAI,EAAE;YAAA;cAA7BC,QAAQ;cACdD,IAAI,GAAGd,eAAe,CAACe,QAAQ,WAARA,QAAQ,GAAI,EAAE,CAAC;YAAC;cAAA,iCAElCD,IAAI;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA,cAKX,YAAEZ,IAAI,KAAK,iBAAiB;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA,iCAAWD,gCAAgC,EAAE;YAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA,MACrE,IAAIR,qBAAqB,EAAE;YAAA;cAAA;cAAA,iCAM1BuB,MAAM,CAACC,aAAa,CAACC,OAAO,CAAC,MAAM,CAAC;YAAA;cAAA;cAAA;cAAA,iCAEpCC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAGhF,CAAC;EAEDC,SAAS,qBAACR,IAAY;IACpB,IAAMS,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;IACpDF,SAAS,CAACG,WAAW,GAAGZ,IAAI;IAC5BU,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,SAAS,CAAC;IACpCA,SAAS,CAACM,MAAM,EAAE;IAClB,IAAI;MACFL,QAAQ,CAACM,WAAW,CAAC,MAAM,CAAC;MAC5B,OAAO,IAAI;KACZ,CAAC,iBAAM;MACN,OAAO,KAAK;KACb,SAAS;MACRN,QAAQ,CAACG,IAAI,CAACI,WAAW,CAACR,SAAS,CAAC;;EAExC,CAAC;EACKS,cAAc,0BAAClB,IAAY,EAAEV,OAAyB;IAAA;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,eAClDA,OAAO,CAAC6B,WAAW;cAAA,kCACpB3C,YAAY,CAACkB,IAAI;cAAA;YAAA;cAAA,IACfH,SAAS,CAACC,SAAS;gBAAA;gBAAA;cAAA;cAAA,MAChB,IAAIf,6BAA6B,EAAE;YAAA;cAAA;cAInC2C,kBAAkB,GAAGC,uBAAuB,CAACrB,IAAI,CAAC;cAAA;cAAA,iCAClDT,SAAS,CAACC,SAAS,CAAC8B,KAAK,CAAC,CAACF,kBAAkB,CAAC,CAAC;YAAA;cAAA,kCAC9C,IAAI;YAAA;cAAA;cAAA;cAAA,eAGP,aAAEhC,IAAI,KAAK,iBAAiB;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA,iCAAWD,gCAAgC,EAAE;YAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA,MACrE,IAAIR,qBAAqB,EAAE;YAAA;cAAA,MAE7B,IAAID,oBAAoB,CAAC,aAAE6C,OAAO,CAAC;YAAA;cAAA,kCAIpC,KAAI,CAACf,SAAS,CAACR,IAAI,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAEjC,CAAC;EACKwB,cAAc;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACLC,sBAAsB,CAAC,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAClE,CAAC;EACKC,aAAa,yBAACC,QAAyB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACtCpC,SAAS,CAACC,SAAS;gBAAA;gBAAA;cAAA;cAAA,MAChB,IAAIf,6BAA6B,EAAE;YAAA;cAAA;cAAA;cAAA,iCAIZc,SAAS,CAACC,SAAS,CAACG,IAAI,EAAE;YAAA;cAAjDC,cAAc;cAAA;cAAA,iCACDZ,yBAAyB,CAACY,cAAc,CAAC;YAAA;cAAtDC,IAAI;cAAA,IACLA,IAAI;gBAAA;gBAAA;cAAA;cAAA,kCACA,IAAI;YAAA;cAAA;cAAA,iCAGcQ,OAAO,CAACuB,GAAG,CAAC,CACrC9C,iBAAiB,CAACe,IAAI,CAAC,EACvBZ,yBAAyB,CAACY,IAAI,CAAC,CAChC,CAAC;YAAA;cAAA;cAAA;cAHKgC,IAAI;cAAEC,IAAI;cAAA,kCAKV;gBAAED,IAAI,EAAJA,IAAI;gBAAEC,IAAI,EAAJA;cAAI,CAAE;YAAA;cAAA;cAAA;cAAA,eAGjB,aAAE1C,IAAI,KAAK,iBAAiB;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA,iCAAWD,gCAAgC,EAAE;YAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA,MACrE,IAAIR,qBAAqB,EAAE;YAAA;cAAA,MAE7B,IAAIC,qBAAqB,CAAC,aAAE2C,OAAO,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAE9C,CAAC;EACKQ,aAAa,yBAACC,WAAmB;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IAChCzC,SAAS,CAACC,SAAS;gBAAA;gBAAA;cAAA;cAAA,MAChB,IAAIf,6BAA6B,EAAE;YAAA;cAAA;cAMnCoB,IAAI,GAAGhB,YAAY,CAACmD,WAAW,EAAE,WAAW,CAAC;cAAA;cAAA,iCAC7CzC,SAAS,CAACC,SAAS,CAAC8B,KAAK,CAAC;cAM9B,IAAIW,aAAa,qBACdpC,IAAI,CAACqC,IAAI,EAAGrC,IAAI,EACwB,CAC5C,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA,MAEI,IAAInB,oBAAoB,CAAC,aAAI6C,OAAO,CAAC;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAE/C,CAAC;EACKY,aAAa;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACJV,sBAAsB,CAAC,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAClE,CAAC;EACDW,oBAAoB,mCAAU,CAAC;EAC/BC,uBAAuB,sCAAU;CAClC;AAOD,SAAeZ,sBAAsB,CAACa,KAAe;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA,IAC9C/C,SAAS,CAACC,SAAS;YAAA;YAAA;UAAA;UAAA,MAChB,IAAIf,6BAA6B,EAAE;QAAA;UAAA;UAAA;UAAA,iCAIZc,SAAS,CAACC,SAAS,CAACG,IAAI,EAAE;QAAA;UAAjDC,cAAc;UAAA,kCACbA,cAAc,CAAC2C,OAAO,CAAC,UAACC,IAAI;YAAA,OAAKA,IAAI,CAACF,KAAK;UAAA,EAAC,CAACG,IAAI,CAAC,UAACP,IAAI;YAAA,OAAKI,KAAK,CAACI,QAAQ,CAACR,IAAI,CAAC;UAAA,EAAC;QAAA;UAAA;UAAA;UAAA,eAGpF,aAAE9C,IAAI,KAAK,iBAAiB;UAAA;YAAA;YAAA;UAAA;UAAA;UAAA,iCAAWD,gCAAgC,EAAE;QAAA;UAAA;QAAA;UAAA;YAAA;YAAA;UAAA;UAAA,MACrE,IAAIR,qBAAqB,EAAE;QAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAMvC,SAAS0C,uBAAuB,CAACsB,UAAkB;EACjD,OAAO,IAAIV,aAAa,CAAC;IAEvB,WAAW,EAAE,IAAIW,IAAI,CAAC,CAACD,UAAU,CAAC,EAAE;MAAET,IAAI,EAAE;IAAW,CAAE,CAAC;IAE1D,YAAY,EAAE,IAAIU,IAAI,CAAC,CAAC1D,eAAe,CAACyD,UAAU,CAAC,CAAC,EAAE;MAAET,IAAI,EAAE;IAAY,CAAE;GAC7E,CAAC;AACJ","names":["StringFormat","ClipboardUnavailableException","CopyFailureException","NoPermissionException","PasteFailureException","base64toBlob","blobToBase64Async","findHtmlInClipboardAsync","findImageInClipboardAsync","getImageSizeFromBlobAsync","htmlToPlainText","isClipboardPermissionDeniedAsync","name","getStringAsync","options","navigator","clipboard","preferredFormat","HTML","read","clipboardItems","blob","readText","Response","text","blobText","window","clipboardData","getData","Promise","reject","Error","setString","textField","document","createElement","textContent","body","appendChild","select","execCommand","removeChild","setStringAsync","inputFormat","clipboardItemInput","createHtmlClipboardItem","write","message","hasStringAsync","clipboardHasTypesAsync","getImageAsync","_options","all","data","size","setImageAsync","base64image","ClipboardItem","type","hasImageAsync","addClipboardListener","removeClipboardListener","types","flatMap","item","some","includes","htmlString","Blob"],"sourceRoot":"","sources":["../../src/web/ClipboardModule.ts"],"sourcesContent":["import {\n  ClipboardImage,\n  GetImageOptions,\n  GetStringOptions,\n  SetStringOptions,\n  StringFormat,\n} from '../Clipboard.types';\nimport {\n  ClipboardUnavailableException,\n  CopyFailureException,\n  NoPermissionException,\n  PasteFailureException,\n} from './Exceptions';\nimport {\n  base64toBlob,\n  blobToBase64Async,\n  findHtmlInClipboardAsync,\n  findImageInClipboardAsync,\n  getImageSizeFromBlobAsync,\n  htmlToPlainText,\n  isClipboardPermissionDeniedAsync,\n} from './Utils';\n\nexport default {\n  get name(): string {\n    return 'ExpoClipboard';\n  },\n  async getStringAsync(options: GetStringOptions): Promise<string> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      switch (options.preferredFormat) {\n        case StringFormat.HTML: {\n          // Try reading HTML first\n          const clipboardItems = await navigator.clipboard.read();\n          const blob = await findHtmlInClipboardAsync(clipboardItems);\n          if (!blob) {\n            // Fall back to plain text\n            return await navigator.clipboard.readText();\n          }\n          return await new Response(blob).text();\n        }\n        default: {\n          let text = await navigator.clipboard.readText();\n          if (!text || text === '') {\n            // If there's no direct plain text, try reading HTML\n            const clipboardItems = await navigator.clipboard.read();\n            const blob = await findHtmlInClipboardAsync(clipboardItems);\n            const blobText = await blob?.text();\n            text = htmlToPlainText(blobText ?? '');\n          }\n          return text;\n        }\n      }\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n\n      try {\n        // Internet Explorer\n        // @ts-ignore\n        return window.clipboardData.getData('Text');\n      } catch {\n        return Promise.reject(new Error('Unable to retrieve item from clipboard'));\n      }\n    }\n  },\n  // TODO: (barthap) The `setString` was deprecated in SDK 45. Remove this function in a few SDK cycles.\n  setString(text: string): boolean {\n    const textField = document.createElement('textarea');\n    textField.textContent = text;\n    document.body.appendChild(textField);\n    textField.select();\n    try {\n      document.execCommand('copy');\n      return true;\n    } catch {\n      return false;\n    } finally {\n      document.body.removeChild(textField);\n    }\n  },\n  async setStringAsync(text: string, options: SetStringOptions): Promise<boolean> {\n    switch (options.inputFormat) {\n      case StringFormat.HTML: {\n        if (!navigator.clipboard) {\n          throw new ClipboardUnavailableException();\n        }\n\n        try {\n          const clipboardItemInput = createHtmlClipboardItem(text);\n          await navigator.clipboard.write([clipboardItemInput]);\n          return true;\n        } catch (e) {\n          // it might fail, because user denied permission\n          if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n            throw new NoPermissionException();\n          }\n          throw new CopyFailureException(e.message);\n        }\n      }\n      default:\n        return this.setString(text);\n    }\n  },\n  async hasStringAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['text/plain', 'text/html']);\n  },\n  async getImageAsync(_options: GetImageOptions): Promise<ClipboardImage | null> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      const blob = await findImageInClipboardAsync(clipboardItems);\n      if (!blob) {\n        return null;\n      }\n\n      const [data, size] = await Promise.all([\n        blobToBase64Async(blob),\n        getImageSizeFromBlobAsync(blob),\n      ]);\n\n      return { data, size };\n    } catch (e) {\n      // it might fail, because user denied permission\n      if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n        throw new NoPermissionException();\n      }\n      throw new PasteFailureException(e.message);\n    }\n  },\n  async setImageAsync(base64image: string): Promise<void> {\n    if (!navigator.clipboard) {\n      throw new ClipboardUnavailableException();\n    }\n\n    try {\n      // we set it always to `image/png` because it's the only format supported by the clipboard\n      // but it seems to work even when provided jpeg data\n      const blob = base64toBlob(base64image, 'image/png');\n      await navigator.clipboard.write([\n        // I cannot use `@ts-expect-error` here because some environments consider this correct:\n        // expo-module build - OK,\n        // et gdad - error\n        // Fixed in TS >4.4.3: https://github.com/microsoft/TypeScript/issues/46116#issuecomment-932443415\n        // @ts-ignore Some tools seem to use TS <= 4.4.3\n        new ClipboardItem({\n          [blob.type]: blob,\n        } as Record<string, ClipboardItemDataType>),\n      ]);\n    } catch (err: any) {\n      throw new CopyFailureException(err.message);\n    }\n  },\n  async hasImageAsync(): Promise<boolean> {\n    return await clipboardHasTypesAsync(['image/png', 'image/jpeg']);\n  },\n  addClipboardListener(): void {},\n  removeClipboardListener(): void {},\n};\n\n/**\n * Resolves to true if clipboard has one of provided {@link types}.\n * @throws `ClipboardUnavailableException` if AsyncClipboard API is not available\n * @throws `NoPermissionException` if user denied permission\n */\nasync function clipboardHasTypesAsync(types: string[]): Promise<boolean> {\n  if (!navigator.clipboard) {\n    throw new ClipboardUnavailableException();\n  }\n\n  try {\n    const clipboardItems = await navigator.clipboard.read();\n    return clipboardItems.flatMap((item) => item.types).some((type) => types.includes(type));\n  } catch (e) {\n    // it might fail, because user denied permission\n    if (e.name === 'NotAllowedError' || (await isClipboardPermissionDeniedAsync())) {\n      throw new NoPermissionException();\n    }\n    throw e;\n  }\n}\n\nfunction createHtmlClipboardItem(htmlString: string): ClipboardItem {\n  return new ClipboardItem({\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/html': new Blob([htmlString], { type: 'text/html' }),\n    // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ\n    'text/plain': new Blob([htmlToPlainText(htmlString)], { type: 'text/plain' }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}