{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nexport function base64toBlob(base64Data, contentType) {\n  contentType = contentType || '';\n  var sliceSize = 1024;\n  var byteCharacters = atob(base64Data);\n  var bytesLength = byteCharacters.length;\n  var slicesCount = Math.ceil(bytesLength / sliceSize);\n  var byteArrays = new Array(slicesCount);\n\n  for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    var begin = sliceIndex * sliceSize;\n    var end = Math.min(begin + sliceSize, bytesLength);\n    var bytes = new Array(end - begin);\n\n    for (var offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n\n  return new Blob(byteArrays, {\n    type: contentType\n  });\n}\nexport function blobToBase64Async(blob) {\n  return new Promise(function (resolve, _) {\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n      return resolve(reader.result);\n    };\n\n    reader.readAsDataURL(blob);\n  });\n}\nexport function htmlToPlainText(html) {\n  var tempDivElement = document.createElement('div');\n  tempDivElement.innerHTML = html;\n  return tempDivElement.textContent || tempDivElement.innerText || '';\n}\nexport function getImageSizeFromBlobAsync(blob) {\n  return new Promise(function (resolve, _) {\n    var blobUrl = URL.createObjectURL(blob);\n    var img = document.createElement('img');\n    img.src = blobUrl;\n\n    img.onload = function () {\n      resolve({\n        width: img.width,\n        height: img.height\n      });\n    };\n  });\n}\nexport function findImageInClipboardAsync(items) {\n  var _iterator, _step, clipboardItem;\n\n  return _regeneratorRuntime.async(function findImageInClipboardAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelperLoose(items);\n\n        case 1:\n          if ((_step = _iterator()).done) {\n            _context.next = 13;\n            break;\n          }\n\n          clipboardItem = _step.value;\n\n          if (!clipboardItem.types.some(function (type) {\n            return type === 'image/png';\n          })) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(clipboardItem.getType('image/png'));\n\n        case 6:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 7:\n          if (!clipboardItem.types.some(function (type) {\n            return type === 'image/jpeg';\n          })) {\n            _context.next = 11;\n            break;\n          }\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(clipboardItem.getType('image/jpeg'));\n\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n          _context.next = 1;\n          break;\n\n        case 13:\n          return _context.abrupt(\"return\", null);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function findHtmlInClipboardAsync(items) {\n  var _iterator2, _step2, clipboardItem;\n\n  return _regeneratorRuntime.async(function findHtmlInClipboardAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _iterator2 = _createForOfIteratorHelperLoose(items);\n\n        case 1:\n          if ((_step2 = _iterator2()).done) {\n            _context2.next = 9;\n            break;\n          }\n\n          clipboardItem = _step2.value;\n\n          if (!clipboardItem.types.some(function (type) {\n            return type === 'text/html';\n          })) {\n            _context2.next = 7;\n            break;\n          }\n\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(clipboardItem.getType('text/html'));\n\n        case 6:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 7:\n          _context2.next = 1;\n          break;\n\n        case 9:\n          return _context2.abrupt(\"return\", null);\n\n        case 10:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isClipboardPermissionDeniedAsync() {\n  var queryOpts, permissionStatus;\n  return _regeneratorRuntime.async(function isClipboardPermissionDeniedAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          queryOpts = {\n            name: 'clipboard-read'\n          };\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(navigator.permissions.query(queryOpts));\n\n        case 3:\n          permissionStatus = _context3.sent;\n          return _context3.abrupt(\"return\", permissionStatus.state === 'denied');\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"mappings":"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","names":["base64toBlob","base64Data","contentType","sliceSize","byteCharacters","atob","bytesLength","length","slicesCount","Math","ceil","byteArrays","Array","sliceIndex","begin","end","min","bytes","offset","i","charCodeAt","Uint8Array","Blob","type","blobToBase64Async","blob","Promise","resolve","_","reader","FileReader","onloadend","result","readAsDataURL","htmlToPlainText","html","tempDivElement","document","createElement","innerHTML","textContent","innerText","getImageSizeFromBlobAsync","blobUrl","URL","createObjectURL","img","src","onload","width","height","findImageInClipboardAsync","items","clipboardItem","types","some","getType","findHtmlInClipboardAsync","isClipboardPermissionDeniedAsync","queryOpts","name","navigator","permissions","query","permissionStatus","state"],"sourceRoot":"","sources":["../../src/web/Utils.ts"],"sourcesContent":["/**\n * Converts base64-encoded data to a `Blob` object.\n * @see https://stackoverflow.com/a/20151856\n */\nexport function base64toBlob(base64Data: string, contentType: string): Blob {\n  contentType = contentType || '';\n  const sliceSize = 1024;\n  const byteCharacters = atob(base64Data);\n  const bytesLength = byteCharacters.length;\n  const slicesCount = Math.ceil(bytesLength / sliceSize);\n  const byteArrays = new Array(slicesCount);\n\n  for (let sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {\n    const begin = sliceIndex * sliceSize;\n    const end = Math.min(begin + sliceSize, bytesLength);\n\n    const bytes = new Array(end - begin);\n    for (let offset = begin, i = 0; offset < end; ++i, ++offset) {\n      bytes[i] = byteCharacters[offset].charCodeAt(0);\n    }\n    byteArrays[sliceIndex] = new Uint8Array(bytes);\n  }\n  // I cannot use `@ts-expect-error` here because some environments consider this correct:\n  // expo-module build - OK,\n  // expo-module test - error\n  // @ts-ignore `Blob` from `lib.dom.d.ts` and the one from `@types/react-native` differ somehow\n  return new Blob(byteArrays, { type: contentType });\n}\n\n/**\n * Converts blob to base64-encoded string with Data-URL prefix.\n */\nexport function blobToBase64Async(blob: Blob): Promise<string> {\n  return new Promise((resolve, _) => {\n    const reader = new FileReader();\n    reader.onloadend = () => resolve(reader.result as string);\n    reader.readAsDataURL(blob);\n  });\n}\n\nexport function htmlToPlainText(html: string) {\n  const tempDivElement = document.createElement('div');\n  tempDivElement.innerHTML = html;\n  return tempDivElement.textContent || tempDivElement.innerText || '';\n}\n\nexport function getImageSizeFromBlobAsync(blob: Blob): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, _) => {\n    const blobUrl = URL.createObjectURL(blob);\n    const img = document.createElement('img');\n    img.src = blobUrl;\n    img.onload = function () {\n      resolve({ width: img.width, height: img.height });\n    };\n  });\n}\n\nexport async function findImageInClipboardAsync(items: ClipboardItems): Promise<Blob | null> {\n  for (const clipboardItem of items) {\n    // first look for png\n    if (clipboardItem.types.some((type) => type === 'image/png')) {\n      return await clipboardItem.getType('image/png');\n    }\n\n    // alternatively, an image might be a jpeg\n    // NOTE: Currently, this is not supported by browsers yet. They only support PNG now\n    if (clipboardItem.types.some((type) => type === 'image/jpeg')) {\n      return await clipboardItem.getType('image/jpeg');\n    }\n  }\n  return null;\n}\n\nexport async function findHtmlInClipboardAsync(items: ClipboardItems): Promise<Blob | null> {\n  for (const clipboardItem of items) {\n    if (clipboardItem.types.some((type) => type === 'text/html')) {\n      return await clipboardItem.getType('text/html');\n    }\n  }\n  return null;\n}\n\nexport async function isClipboardPermissionDeniedAsync(): Promise<boolean> {\n  const queryOpts = { name: 'clipboard-read' as PermissionName };\n  const permissionStatus = await navigator.permissions.query(queryOpts);\n  return permissionStatus.state === 'denied';\n}\n"]},"metadata":{},"sourceType":"module"}