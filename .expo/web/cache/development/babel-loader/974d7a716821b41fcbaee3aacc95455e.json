{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/toArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\nexport default {\n  get currency() {\n    return null;\n  },\n\n  get decimalSeparator() {\n    return 1.1.toLocaleString().substring(1, 2);\n  },\n\n  get digitGroupingSeparator() {\n    var value = 1000 .toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n\n  get isRTL() {\n    var _rtlDetect$isRtlLang;\n\n    return (_rtlDetect$isRtlLang = rtlDetect.isRtlLang(this.locale)) != null ? _rtlDetect$isRtlLang : false;\n  },\n\n  get isMetric() {\n    var region = this.region;\n\n    switch (region) {\n      case 'US':\n      case 'LR':\n      case 'MM':\n        return false;\n    }\n\n    return true;\n  },\n\n  get locale() {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n\n    var locale = navigator.language || navigator['systemLanguage'] || navigator['browserLanguage'] || navigator['userLanguage'] || this.locales[0];\n    return locale;\n  },\n\n  get locales() {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n\n    var _navigator = navigator,\n        _navigator$languages = _navigator.languages,\n        languages = _navigator$languages === void 0 ? [] : _navigator$languages;\n    return Array.from(languages);\n  },\n\n  get timezone() {\n    var defaultTimeZone = 'Etc/UTC';\n\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n\n  get isoCurrencyCodes() {\n    return [];\n  },\n\n  get region() {\n    var locale = this.locale;\n\n    var _ref = typeof locale === 'string' ? locale.split('-') : [],\n        _ref2 = _toArray(_ref),\n        suffixes = _ref2.slice(1);\n\n    for (var _iterator = _createForOfIteratorHelperLoose(suffixes), _step; !(_step = _iterator()).done;) {\n      var suffix = _step.value;\n\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n\n    return null;\n  },\n\n  getLocalizationAsync: function getLocalizationAsync() {\n    var _this = this;\n\n    return function _callee() {\n      var currency, decimalSeparator, digitGroupingSeparator, isoCurrencyCodes, isMetric, isRTL, locale, locales, region, timezone;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currency = _this.currency, decimalSeparator = _this.decimalSeparator, digitGroupingSeparator = _this.digitGroupingSeparator, isoCurrencyCodes = _this.isoCurrencyCodes, isMetric = _this.isMetric, isRTL = _this.isRTL, locale = _this.locale, locales = _this.locales, region = _this.region, timezone = _this.timezone;\n              return _context.abrupt(\"return\", {\n                currency: currency,\n                decimalSeparator: decimalSeparator,\n                digitGroupingSeparator: digitGroupingSeparator,\n                isoCurrencyCodes: isoCurrencyCodes,\n                isMetric: isMetric,\n                isRTL: isRTL,\n                locale: locale,\n                locales: locales,\n                region: region,\n                timezone: timezone\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"mappings":"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","names":["Platform","rtlDetect","currency","decimalSeparator","toLocaleString","substring","digitGroupingSeparator","value","length","isRTL","isRtlLang","locale","isMetric","region","isDOMAvailable","navigator","language","locales","languages","Array","from","timezone","defaultTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","isoCurrencyCodes","split","suffixes","suffix","toUpperCase","getLocalizationAsync"],"sourceRoot":"","sources":["../src/ExpoLocalization.ts"],"sourcesContent":["/* eslint-env browser */\nimport { Platform } from 'expo-modules-core';\nimport * as rtlDetect from 'rtl-detect';\n\nimport { Localization } from './Localization.types';\n\nexport default {\n  get currency(): string | null {\n    // TODO: Add support\n    return null;\n  },\n  get decimalSeparator(): string {\n    return (1.1).toLocaleString().substring(1, 2);\n  },\n  get digitGroupingSeparator(): string {\n    const value = (1000).toLocaleString();\n    return value.length === 5 ? value.substring(1, 2) : '';\n  },\n  get isRTL(): boolean {\n    return rtlDetect.isRtlLang(this.locale) ?? false;\n  },\n  get isMetric(): boolean {\n    const { region } = this;\n    switch (region) {\n      case 'US': // USA\n      case 'LR': // Liberia\n      case 'MM': // Myanmar\n        return false;\n    }\n    return true;\n  },\n  get locale(): string {\n    if (!Platform.isDOMAvailable) {\n      return '';\n    }\n    const locale =\n      navigator.language ||\n      navigator['systemLanguage'] ||\n      navigator['browserLanguage'] ||\n      navigator['userLanguage'] ||\n      this.locales[0];\n    return locale;\n  },\n  get locales(): string[] {\n    if (!Platform.isDOMAvailable) {\n      return [];\n    }\n    const { languages = [] } = navigator;\n    return Array.from(languages);\n  },\n  get timezone(): string {\n    const defaultTimeZone = 'Etc/UTC';\n    if (typeof Intl === 'undefined') {\n      return defaultTimeZone;\n    }\n    return Intl.DateTimeFormat().resolvedOptions().timeZone || defaultTimeZone;\n  },\n  get isoCurrencyCodes(): string[] {\n    // TODO(Bacon): Add this - very low priority\n    return [];\n  },\n  get region(): string | null {\n    // There is no way to obtain the current region, as is possible on native.\n    // Instead, use the country-code from the locale when possible (e.g. \"en-US\").\n    const { locale } = this;\n    const [, ...suffixes] = typeof locale === 'string' ? locale.split('-') : [];\n    for (const suffix of suffixes) {\n      if (suffix.length === 2) {\n        return suffix.toUpperCase();\n      }\n    }\n    return null;\n  },\n  async getLocalizationAsync(): Promise<Localization> {\n    const {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    } = this;\n    return {\n      currency,\n      decimalSeparator,\n      digitGroupingSeparator,\n      isoCurrencyCodes,\n      isMetric,\n      isRTL,\n      locale,\n      locales,\n      region,\n      timezone,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}