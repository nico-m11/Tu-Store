{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { CodedError } from 'expo-modules-core';\nexport var ClipboardUnavailableException = function (_CodedError) {\n  _inherits(ClipboardUnavailableException, _CodedError);\n\n  var _super = _createSuper(ClipboardUnavailableException);\n\n  function ClipboardUnavailableException() {\n    _classCallCheck(this, ClipboardUnavailableException);\n\n    return _super.call(this, 'ERR_CLIPBOARD_UNAVAILABLE', \"The 'AsyncClipboard' API is not available on this browser\");\n  }\n\n  return _createClass(ClipboardUnavailableException);\n}(CodedError);\nexport var CopyFailureException = function (_CodedError2) {\n  _inherits(CopyFailureException, _CodedError2);\n\n  var _super2 = _createSuper(CopyFailureException);\n\n  function CopyFailureException(cause) {\n    _classCallCheck(this, CopyFailureException);\n\n    return _super2.call(this, 'ERR_COPY_FAILURE', \"Failed to copy to clipboard: \" + cause);\n  }\n\n  return _createClass(CopyFailureException);\n}(CodedError);\nexport var PasteFailureException = function (_CodedError3) {\n  _inherits(PasteFailureException, _CodedError3);\n\n  var _super3 = _createSuper(PasteFailureException);\n\n  function PasteFailureException(cause) {\n    _classCallCheck(this, PasteFailureException);\n\n    return _super3.call(this, 'ERR_COPY_FAILURE', \"Failed to paste from clipboard: \" + cause);\n  }\n\n  return _createClass(PasteFailureException);\n}(CodedError);\nexport var NoPermissionException = function (_CodedError4) {\n  _inherits(NoPermissionException, _CodedError4);\n\n  var _super4 = _createSuper(NoPermissionException);\n\n  function NoPermissionException() {\n    _classCallCheck(this, NoPermissionException);\n\n    return _super4.call(this, 'ERR_NO_PERMISSION', 'User denied permission to access clipboard');\n  }\n\n  return _createClass(NoPermissionException);\n}(CodedError);","map":{"version":3,"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AAEA,WAAaC,6BAAb;EAAA;;EAAA;;EACE;IAAA;;IAAA,yBACQ,2BADR,EACqC,2DADrC;EAEC;;EAHH;AAAA,EAAmDD,UAAnD;AAMA,WAAaE,oBAAb;EAAA;;EAAA;;EACE,8BAAYC,KAAZ,EAAyB;IAAA;;IAAA,0BACjB,kBADiB,oCACmCA,KADnC;EAExB;;EAHH;AAAA,EAA0CH,UAA1C;AAMA,WAAaI,qBAAb;EAAA;;EAAA;;EACE,+BAAYD,KAAZ,EAAyB;IAAA;;IAAA,0BACjB,kBADiB,uCACsCA,KADtC;EAExB;;EAHH;AAAA,EAA2CH,UAA3C;AAMA,WAAaK,qBAAb;EAAA;;EAAA;;EACE;IAAA;;IAAA,0BACQ,mBADR,EAC6B,4CAD7B;EAEC;;EAHH;AAAA,EAA2CL,UAA3C","names":["CodedError","ClipboardUnavailableException","CopyFailureException","cause","PasteFailureException","NoPermissionException"],"sourceRoot":"","sources":["../../src/web/Exceptions.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nexport class ClipboardUnavailableException extends CodedError {\n  constructor() {\n    super('ERR_CLIPBOARD_UNAVAILABLE', \"The 'AsyncClipboard' API is not available on this browser\");\n  }\n}\n\nexport class CopyFailureException extends CodedError {\n  constructor(cause: string) {\n    super('ERR_COPY_FAILURE', `Failed to copy to clipboard: ${cause}`);\n  }\n}\n\nexport class PasteFailureException extends CodedError {\n  constructor(cause: string) {\n    super('ERR_COPY_FAILURE', `Failed to paste from clipboard: ${cause}`);\n  }\n}\n\nexport class NoPermissionException extends CodedError {\n  constructor() {\n    super('ERR_NO_PERMISSION', 'User denied permission to access clipboard');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}